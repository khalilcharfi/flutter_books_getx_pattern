// Mocks generated by Mockito 5.0.17 from annotations
// in interview/test/app/data/repos/book_repo_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:interview/app/core/error/failures.dart' as _i5;
import 'package:interview/app/data/models/book.dart' as _i6;
import 'package:interview/app/data/models/dto/book_dto.dart' as _i7;
import 'package:interview/app/data/repos/abstract/book_repo.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [BookRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepo extends _i1.Mock implements _i3.BookRepo {
  MockBookRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Book>>> getBooks() =>
      (super.noSuchMethod(Invocation.method(#getBooks, []),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Book>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.Book>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.Book>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Book>> addBook(
          {_i7.BookDto? bookDto}) =>
      (super.noSuchMethod(Invocation.method(#addBook, [], {#bookDto: bookDto}),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Book>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Book>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Book>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Book>> editBook(
          {String? bookId, _i7.BookDto? bookDto}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #editBook, [], {#bookId: bookId, #bookDto: bookDto}),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Book>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Book>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Book>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Book>> getBook({String? bookId}) =>
      (super.noSuchMethod(Invocation.method(#getBook, [], {#bookId: bookId}),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Book>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Book>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Book>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deleteBook({String? bookId}) =>
      (super.noSuchMethod(Invocation.method(#deleteBook, [], {#bookId: bookId}),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
